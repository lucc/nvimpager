#!/bin/bash

# Copyright (c) 2017 Lucas Hoffmann
# Licenced under a BSD-2-clause licence.  See the LICENSE file.

RUNTIME=${BASH_SOURCE%/*}
export RUNTIME
export PPID

name=nvimpager
mode=auto
show_line=0
rc=${XDG_CONFIG_HOME:-~/.config}/nvimpager/init.vim
nvim=${NVIM:-nvim}

usage () {
  echo "Usage: ${0##*/} [-acpn] [--] [nvim options and files]"
  echo "       ${0##*/} -n"
  echo "       ${0##*/} -h"
  echo "       ${0##*/} -v"
}
description () {
    cat <<-EOF

    $name provides a simple pager based on neovim.
    Options:
        -h          this help
        -v          version output
        -n          number all output lines
        -a          enforce auto mode (default)
        -c          enforce cat mode
        -p          enforce pager mode

    All further arguments are passed to neovim.  But one has to add "--"
    if the first argument is an option in order to stop this script from
    interpeting it.

    If "-" or no files are given stdin is read.

    In auto mode, if the cumulative length of all file arguments is
    smaller than the terminal size, cat mode is used, otherwise pager mode
    is used.  If any none file argument (neovim option) is given pager
    mode is implied.
EOF
}

while getopts achnpv flag; do
  case $flag in
    a) mode=auto;;
    c) mode=cat;;
    h) usage; description; exit;;
    n) show_line=1;;
    p) mode=pager;;
    v)
      version=$(git -C "$RUNTIME" describe 2>/dev/null) || version=v0.6
      echo "$name $version"
      exit
      ;;
    *) usage >&2; exit 2;;
  esac
done
shift $((OPTIND - 1))

# Display the usage text if no arguments where given and stdin is a tty.
if [[ $# -eq 0 && -t 0 ]]; then
  usage
  exit 2
fi

# If we are not on a tty just "be" cat.
if [[ ! -t 1 && $mode = auto ]]; then
  exec cat "$@"
fi

if [[ ! -r $rc ]]; then
  rc=NORC
fi

# Collect all file arguments until the first non file into $files.  If one non
# file is found pager mode is enforced.
files=()
while [[ $# -gt 0 ]]; do
  if [[ -f $1 ]]; then
    files+=("$1")
    shift
  else
    if [[ $mode = auto ]]; then
      mode=pager
    fi
    break
  fi
done

# Either if stdin is not a tty or if we are not in pager mode but did not get
# any file arguments, read stdin into a temp file.
if [[ ( $mode != pager && ${#files[@]} -eq 0 ) || ! -t 0 ]]; then
  files=("$(mktemp)")
  # Bash runs the EXIT trap also when exiting due to signals.
  trap 'rm -f "${files[0]}"' EXIT
  cat > "${files[0]}"
fi

default_args=(
  -R
  ${rc:+-u "$rc"}
  --cmd 'set rtp+=$RUNTIME'
  --cmd 'lua nvimpager = require("nvimpager")'
  --cmd 'lua nvimpager.stage1()'
  -c "let g:nvimpager_line=$show_line"
  -c 'lua nvimpager.stage2()'
)
# Switch to cat mode if all files combined are shorter than the terminal
# height.
if [[ $mode = cat || \
      $mode = auto && $(cat "${files[@]}" | wc -l) -le $(tput lines) ]]
then
  default_args+=(--headless)
fi
$nvim "${default_args[@]}" "${files[@]}" "$@" </dev/tty
